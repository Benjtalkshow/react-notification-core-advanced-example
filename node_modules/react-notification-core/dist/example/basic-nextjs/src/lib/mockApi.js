"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockDeleteNotification = exports.mockMarkAllAsRead = exports.mockMarkAsRead = exports.mockFetchNotifications = void 0;
const mockNotifications = [
    {
        id: "1",
        title: "Welcome to the app",
        message: "Thanks for trying out our notification system!",
        timestamp: new Date(Date.now() - 5 * 60 * 1000),
        read: false,
        type: "info",
    },
    {
        id: "2",
        title: "New feature available",
        message: "Check out our new dashboard features.",
        timestamp: new Date(Date.now() - 60 * 60 * 1000),
        read: true,
        type: "info",
    },
    {
        id: "3",
        title: "Action required",
        message: "Please verify your email address.",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
        read: false,
        type: "warning",
    },
    {
        id: "4",
        title: "Payment successful",
        message: "Your subscription has been renewed.",
        timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        read: true,
        type: "success",
    },
    {
        id: "5",
        title: "Login attempt",
        message: "A new login was detected from an unknown device.",
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        read: false,
        type: "error",
    },
];
// In-memory store for our mock data
let notifications = [...mockNotifications];
// Mock API functions
async function mockFetchNotifications() {
    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 500));
    // Simulate occasional errors (1 in 10 chance)
    if (Math.random() < 0.1) {
        throw new Error("Failed to fetch notifications");
    }
    return [...notifications];
}
exports.mockFetchNotifications = mockFetchNotifications;
async function mockMarkAsRead(id) {
    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 300));
    // Update the notification
    notifications = notifications.map((notification) => notification.id === id ? { ...notification, read: true } : notification);
}
exports.mockMarkAsRead = mockMarkAsRead;
async function mockMarkAllAsRead() {
    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 300));
    // Mark all as read
    notifications = notifications.map((notification) => ({ ...notification, read: true }));
}
exports.mockMarkAllAsRead = mockMarkAllAsRead;
async function mockDeleteNotification(id) {
    // Simulate network delay
    await new Promise((resolve) => setTimeout(resolve, 300));
    // Delete the notification
    notifications = notifications.filter((notification) => notification.id !== id);
}
exports.mockDeleteNotification = mockDeleteNotification;
//# sourceMappingURL=mockApi.js.map