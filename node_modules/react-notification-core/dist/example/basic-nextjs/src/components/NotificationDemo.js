"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_notification_core_1 = require("react-notification-core");
const lucide_react_1 = require("lucide-react");
function NotificationDemo() {
    const { notifications, unreadCount, markAsRead, markAllAsRead, deleteNotification, refreshNotifications, isLoading, error, } = (0, react_notification_core_1.useNotifications)();
    const [isDropdownOpen, setIsDropdownOpen] = (0, react_1.useState)(false);
    const dropdownRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(() => {
        function handleClickOutside(event) {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setIsDropdownOpen(false);
            }
        }
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex flex-col gap-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-6 rounded-lg shadow-md", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold mb-4", children: "Notification Demo" }), (0, jsx_runtime_1.jsx)("p", { className: "mb-4", children: "This is a basic example of how to use the react-notification-core library. Click the bell icon to see your notifications." }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-end items-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "relative", ref: dropdownRef, children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => setIsDropdownOpen(!isDropdownOpen), className: "relative p-2 text-gray-700 hover:bg-gray-100 rounded-full transition-colors", "aria-label": `Notifications ${unreadCount > 0 ? `(${unreadCount} unread)` : ""}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bell, { size: 24 }), unreadCount > 0 && ((0, jsx_runtime_1.jsx)("span", { className: "absolute top-0 right-0 inline-flex items-center justify-center w-5 h-5 text-xs font-bold text-white bg-red-500 rounded-full", children: unreadCount > 99 ? "99+" : unreadCount }))] }), isDropdownOpen && ((0, jsx_runtime_1.jsxs)("div", { className: "absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg z-10 border border-gray-200 overflow-hidden", children: [(0, jsx_runtime_1.jsxs)("div", { className: "p-3 border-b flex justify-between items-center bg-gray-50", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "font-semibold text-gray-800", children: ["Notifications", unreadCount > 0 && ((0, jsx_runtime_1.jsxs)("span", { className: "ml-2 text-xs font-normal text-gray-500", children: [unreadCount, " unread"] }))] }), unreadCount > 0 && ((0, jsx_runtime_1.jsxs)("button", { onClick: () => markAllAsRead(), className: "text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Check, { size: 14 }), "Mark all as read"] }))] }), (0, jsx_runtime_1.jsx)("div", { className: "max-h-96 overflow-y-auto", children: isLoading ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 text-center text-gray-500 flex items-center justify-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin mr-2", children: (0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 16 }) }), "Loading notifications..."] })) : error ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 text-center text-red-500 flex items-center justify-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { size: 16 }), "Error: ", error] })) : notifications.length === 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center text-gray-500 flex flex-col items-center justify-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bell, { size: 32, className: "text-gray-300 mb-2" }), (0, jsx_runtime_1.jsx)("p", { children: "No notifications" })] })) : ((0, jsx_runtime_1.jsx)("ul", { className: "divide-y divide-gray-100", children: notifications.map((notification) => ((0, jsx_runtime_1.jsxs)("li", { className: `p-3 hover:bg-gray-50 transition-colors ${!notification.read ? "bg-blue-50" : ""}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between", children: [(0, jsx_runtime_1.jsx)("h4", { className: `font-medium text-gray-800 ${!notification.read ? "font-semibold" : ""}`, children: notification.title }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500 whitespace-nowrap ml-2", children: (0, react_notification_core_1.formatTimestamp)(notification.timestamp) })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mt-1 line-clamp-2", children: notification.message }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end mt-2 space-x-3", children: [!notification.read && ((0, jsx_runtime_1.jsxs)("button", { onClick: () => markAsRead(notification.id), className: "text-xs text-blue-600 hover:text-blue-800 flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Check, { size: 12 }), "Mark as read"] })), (0, jsx_runtime_1.jsxs)("button", { onClick: () => deleteNotification(notification.id), className: "text-xs text-red-500 hover:text-red-700 flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { size: 12 }), "Delete"] })] })] }, notification.id))) })) }), (0, jsx_runtime_1.jsx)("div", { className: "p-2 border-t bg-gray-50", children: (0, jsx_runtime_1.jsxs)("button", { onClick: () => refreshNotifications(), className: "w-full py-1.5 text-sm text-gray-700 hover:bg-gray-100 rounded flex items-center justify-center gap-1 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 14 }), "Refresh"] }) })] }))] }) })] }) }));
}
exports.default = NotificationDemo;
//# sourceMappingURL=NotificationDemo.js.map