"use strict";
"use client";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_notification_core_1 = require("react-notification-core");
const NotificationBell_1 = __importDefault(require("./NotificationBell"));
const NotificationList_1 = __importDefault(require("./NotificationList"));
const NotificationFilters_1 = __importDefault(require("./NotificationFilters"));
const NotificationStats_1 = __importDefault(require("./NotificationStats"));
function AdvancedNotificationDemo() {
    const { notifications, unreadCount, markAsRead, markAllAsRead, deleteNotification, addNotification, clearAllNotifications, refreshNotifications, isLoading, error, lastUpdated, } = (0, react_notification_core_1.useNotifications)();
    // Set up polling with custom options
    const { refresh, stopPolling, startPolling, isPolling } = (0, react_notification_core_1.useNotificationPolling)({
        interval: 30000,
        enabled: false,
        retryCount: 3,
        retryDelay: 2000,
    });
    // Set up local storage persistence
    const { clearStorage } = (0, react_notification_core_1.useNotificationStorage)({
        storageKey: "advanced-demo-notifications",
        useSessionStorage: false,
    });
    // Set up filtering
    const { filteredNotifications, filterByReadStatus, filterByType, filterBySearch, resetFilters, countsByType, filters, } = (0, react_notification_core_1.useNotificationFilters)();
    // Set up grouping
    const { groupedNotifications, groups } = (0, react_notification_core_1.useNotificationGroups)();
    // Local state
    const [isDropdownOpen, setIsDropdownOpen] = (0, react_1.useState)(false);
    const [isPollingActive, setIsPollingActive] = (0, react_1.useState)(false);
    const [showGrouped, setShowGrouped] = (0, react_1.useState)(false);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)("");
    // Toggle polling
    const togglePolling = () => {
        if (isPollingActive) {
            stopPolling();
            setIsPollingActive(false);
        }
        else {
            startPolling();
            setIsPollingActive(true);
        }
    };
    // Create a new notification
    const createTestNotification = (type) => {
        const newNotification = {
            id: `test-${Date.now()}`,
            title: `Test ${type} notification`,
            message: `This is a test ${type} notification created at ${new Date().toLocaleTimeString()}`,
            timestamp: new Date(),
            read: false,
            type,
        };
        addNotification(newNotification);
    };
    // Handle search
    const handleSearch = (e) => {
        const value = e.target.value;
        setSearchTerm(value);
        filterBySearch(value);
    };
    // Reset all
    const handleReset = () => {
        resetFilters();
        setSearchTerm("");
        clearAllNotifications();
        clearStorage();
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-8", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-6 rounded-lg shadow-md", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold", children: "Advanced Notification Demo" }), (0, jsx_runtime_1.jsx)(NotificationBell_1.default, { unreadCount: unreadCount, onClick: () => setIsDropdownOpen(!isDropdownOpen), isOpen: isDropdownOpen, onClose: () => setIsDropdownOpen(false), notifications: notifications, markAsRead: markAsRead, markAllAsRead: markAllAsRead, deleteNotification: deleteNotification, isLoading: isLoading, error: error })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-medium mb-3", children: "Controls" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-2", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => refreshNotifications(), className: "px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm", children: "Refresh" }), (0, jsx_runtime_1.jsx)("button", { onClick: togglePolling, className: `px-3 py-1 ${isPollingActive ? "bg-red-500 hover:bg-red-600" : "bg-green-500 hover:bg-green-600"} text-white rounded text-sm`, children: isPollingActive ? "Stop Polling" : "Start Polling" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => markAllAsRead(), className: "px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm", disabled: unreadCount === 0, children: "Mark All Read" }), (0, jsx_runtime_1.jsx)("button", { onClick: handleReset, className: "px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600 text-sm", children: "Reset All" })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-medium mb-3", children: "Create Test Notification" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-2", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => createTestNotification("info"), className: "px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm", children: "Info" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => createTestNotification("success"), className: "px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm", children: "Success" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => createTestNotification("warning"), className: "px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 text-sm", children: "Warning" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => createTestNotification("error"), className: "px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm", children: "Error" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-medium mb-3", children: "Filters & Display" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Search notifications...", value: searchTerm, onChange: handleSearch, className: "w-full px-3 py-2 border rounded" }) }), (0, jsx_runtime_1.jsx)(NotificationFilters_1.default, { filterByType: filterByType, filterByReadStatus: filterByReadStatus, resetFilters: resetFilters, countsByType: countsByType, currentFilters: filters }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center", children: (0, jsx_runtime_1.jsxs)("label", { className: "inline-flex items-center cursor-pointer", children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", checked: showGrouped, onChange: () => setShowGrouped(!showGrouped), className: "sr-only peer" }), (0, jsx_runtime_1.jsx)("div", { className: "relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600" }), (0, jsx_runtime_1.jsx)("span", { className: "ms-3 text-sm font-medium", children: "Group by Date" })] }) })] })] }), (0, jsx_runtime_1.jsx)(NotificationStats_1.default, { totalCount: notifications.length, unreadCount: unreadCount, filteredCount: filteredNotifications.length, countsByType: countsByType, lastUpdated: lastUpdated ? (0, react_notification_core_1.formatTimestamp)(lastUpdated) : "Never", isPolling: isPollingActive })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-6 rounded-lg shadow-md", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold mb-4", children: showGrouped ? "Grouped Notifications" : "Filtered Notifications" }), (0, jsx_runtime_1.jsx)(NotificationList_1.default, { notifications: showGrouped ? null : filteredNotifications, groupedNotifications: showGrouped ? groupedNotifications : null, groups: showGrouped ? groups : null, markAsRead: markAsRead, deleteNotification: deleteNotification, isLoading: isLoading, error: error })] })] }));
}
exports.default = AdvancedNotificationDemo;
//# sourceMappingURL=AdvancedNotificationDemo.js.map