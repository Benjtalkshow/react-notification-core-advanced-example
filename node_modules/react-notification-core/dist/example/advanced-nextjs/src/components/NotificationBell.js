"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
function NotificationBell({ unreadCount, onClick, isOpen, onClose, notifications, markAsRead, markAllAsRead, deleteNotification, isLoading, error, }) {
    const dropdownRef = (0, react_1.useRef)(null);
    // Close dropdown when clicking outside
    (0, react_1.useEffect)(() => {
        function handleClickOutside(event) {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                onClose();
            }
        }
        if (isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isOpen, onClose]);
    // Format timestamp
    const formatTime = (timestamp) => {
        const date = typeof timestamp === "string" ? new Date(timestamp) : timestamp;
        return date.toLocaleString();
    };
    // Get notification type style
    const getTypeStyle = (type) => {
        switch (type) {
            case "success":
                return "border-l-4 border-green-500";
            case "warning":
                return "border-l-4 border-yellow-500";
            case "error":
                return "border-l-4 border-red-500";
            case "info":
            default:
                return "border-l-4 border-blue-500";
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "relative", ref: dropdownRef, children: [(0, jsx_runtime_1.jsxs)("button", { onClick: onClick, className: "relative p-2 text-gray-700 hover:bg-gray-100 rounded-full", "aria-label": "Notifications", children: [(0, jsx_runtime_1.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, jsx_runtime_1.jsx)("path", { d: "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9" }), (0, jsx_runtime_1.jsx)("path", { d: "M13.73 21a2 2 0 0 1-3.46 0" })] }), unreadCount > 0 && ((0, jsx_runtime_1.jsx)("span", { className: "absolute top-0 right-0 inline-flex items-center justify-center w-5 h-5 text-xs font-bold text-white bg-red-500 rounded-full", children: unreadCount > 99 ? "99+" : unreadCount }))] }), isOpen && ((0, jsx_runtime_1.jsxs)("div", { className: "absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg z-10", children: [(0, jsx_runtime_1.jsxs)("div", { className: "p-4 border-b flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-semibold", children: "Notifications" }), unreadCount > 0 && ((0, jsx_runtime_1.jsx)("button", { onClick: () => markAllAsRead(), className: "text-sm text-blue-500 hover:text-blue-700", children: "Mark all as read" }))] }), (0, jsx_runtime_1.jsx)("div", { className: "max-h-96 overflow-y-auto", children: isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: "p-4 text-center text-gray-500", children: "Loading notifications..." })) : error ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 text-center text-red-500", children: ["Error: ", error] })) : notifications.length === 0 ? ((0, jsx_runtime_1.jsx)("div", { className: "p-4 text-center text-gray-500", children: "No notifications" })) : ((0, jsx_runtime_1.jsx)("ul", { children: notifications.map((notification) => ((0, jsx_runtime_1.jsxs)("li", { className: `p-4 border-b ${!notification.read ? "bg-blue-50" : ""} ${getTypeStyle(notification.type)}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold", children: notification.title }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: formatTime(notification.timestamp) })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: notification.message }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end mt-2 space-x-2", children: [!notification.read && ((0, jsx_runtime_1.jsx)("button", { onClick: () => markAsRead(notification.id), className: "text-xs text-blue-500 hover:text-blue-700", children: "Mark as read" })), (0, jsx_runtime_1.jsx)("button", { onClick: () => deleteNotification(notification.id), className: "text-xs text-red-500 hover:text-red-700", children: "Delete" })] })] }, notification.id))) })) })] }))] }));
}
exports.default = NotificationBell;
//# sourceMappingURL=NotificationBell.js.map