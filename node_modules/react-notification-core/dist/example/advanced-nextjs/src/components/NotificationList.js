"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
function NotificationList({ notifications, groupedNotifications, groups, markAsRead, deleteNotification, isLoading, error, }) {
    // Format timestamp
    const formatTime = (timestamp) => {
        const date = typeof timestamp === "string" ? new Date(timestamp) : timestamp;
        return date.toLocaleString();
    };
    // Get notification type style
    const getTypeStyle = (type) => {
        switch (type) {
            case "success":
                return "border-l-4 border-green-500";
            case "warning":
                return "border-l-4 border-yellow-500";
            case "error":
                return "border-l-4 border-red-500";
            case "info":
            default:
                return "border-l-4 border-blue-500";
        }
    };
    // Get notification type badge
    const getTypeBadge = (type) => {
        switch (type) {
            case "success":
                return (0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 text-xs bg-green-100 text-green-800 rounded", children: "Success" });
            case "warning":
                return (0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded", children: "Warning" });
            case "error":
                return (0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 text-xs bg-red-100 text-red-800 rounded", children: "Error" });
            case "info":
            default:
                return (0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded", children: "Info" });
        }
    };
    if (isLoading) {
        return (0, jsx_runtime_1.jsx)("div", { className: "p-8 text-center text-gray-500", children: "Loading notifications..." });
    }
    if (error) {
        return (0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center text-red-500", children: ["Error: ", error] });
    }
    // Render grouped notifications
    if (groupedNotifications && groups) {
        if (groups.length === 0) {
            return (0, jsx_runtime_1.jsx)("div", { className: "p-8 text-center text-gray-500", children: "No notifications" });
        }
        return ((0, jsx_runtime_1.jsx)("div", { className: "space-y-6", children: groups.map((date) => ((0, jsx_runtime_1.jsxs)("div", { className: "border rounded-lg overflow-hidden", children: [(0, jsx_runtime_1.jsx)("div", { className: "bg-gray-100 px-4 py-2 font-medium", children: date }), (0, jsx_runtime_1.jsx)("ul", { className: "divide-y", children: groupedNotifications[date].map((notification) => ((0, jsx_runtime_1.jsxs)("li", { className: `p-4 ${!notification.read ? "bg-blue-50" : ""} ${getTypeStyle(notification.type)}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-start", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold", children: notification.title }), getTypeBadge(notification.type)] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: notification.message })] }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: formatTime(notification.timestamp) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end mt-2 space-x-2", children: [!notification.read && ((0, jsx_runtime_1.jsx)("button", { onClick: () => markAsRead(notification.id), className: "text-xs text-blue-500 hover:text-blue-700", children: "Mark as read" })), (0, jsx_runtime_1.jsx)("button", { onClick: () => deleteNotification(notification.id), className: "text-xs text-red-500 hover:text-red-700", children: "Delete" })] })] }, notification.id))) })] }, date))) }));
    }
    // Render flat list of notifications
    if (notifications) {
        if (notifications.length === 0) {
            return (0, jsx_runtime_1.jsx)("div", { className: "p-8 text-center text-gray-500", children: "No notifications" });
        }
        return ((0, jsx_runtime_1.jsx)("ul", { className: "border rounded-lg overflow-hidden divide-y", children: notifications.map((notification) => ((0, jsx_runtime_1.jsxs)("li", { className: `p-4 ${!notification.read ? "bg-blue-50" : ""} ${getTypeStyle(notification.type)}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-start", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold", children: notification.title }), getTypeBadge(notification.type)] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: notification.message })] }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: formatTime(notification.timestamp) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end mt-2 space-x-2", children: [!notification.read && ((0, jsx_runtime_1.jsx)("button", { onClick: () => markAsRead(notification.id), className: "text-xs text-blue-500 hover:text-blue-700", children: "Mark as read" })), (0, jsx_runtime_1.jsx)("button", { onClick: () => deleteNotification(notification.id), className: "text-xs text-red-500 hover:text-red-700", children: "Delete" })] })] }, notification.id))) }));
    }
    return null;
}
exports.default = NotificationList;
//# sourceMappingURL=NotificationList.js.map