"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNotificationStorage = void 0;
const react_1 = require("react");
const NotificationContext_1 = require("../context/NotificationContext");
const inMemoryStorage = (() => {
    let storage = {};
    return {
        getItem: (key) => { var _a; return (_a = storage[key]) !== null && _a !== void 0 ? _a : null; },
        setItem: (key, value) => {
            storage[key] = value;
        },
        removeItem: (key) => {
            delete storage[key];
        },
    };
})();
/**
 * Hook for persisting notifications to localStorage or sessionStorage
 */
const useNotificationStorage = ({ storageKey = "notifications", useSessionStorage = false, } = {}) => {
    const { notifications, addNotification, markAsRead, markAllAsRead, deleteNotification, clearAllNotifications, } = (0, NotificationContext_1.useNotifications)();
    const [storage, setStorage] = (0, react_1.useState)(inMemoryStorage);
    // Initialize storage after mounting
    (0, react_1.useEffect)(() => {
        if (typeof window !== "undefined") {
            const selectedStorage = useSessionStorage ? sessionStorage : localStorage;
            setStorage(selectedStorage);
        }
    }, [useSessionStorage]);
    // Load notifications from storage on mount
    (0, react_1.useEffect)(() => {
        try {
            const storedNotifications = storage.getItem(storageKey);
            if (storedNotifications) {
                const parsedNotifications = JSON.parse(storedNotifications);
                parsedNotifications.forEach((notification) => {
                    addNotification(notification);
                });
            }
        }
        catch (error) {
            console.error("Error loading notifications from storage:", error);
        }
    }, [storage, storageKey, addNotification]);
    // Save notifications to storage when they change
    (0, react_1.useEffect)(() => {
        try {
            storage.setItem(storageKey, JSON.stringify(notifications));
        }
        catch (error) {
            console.error("Error saving notifications to storage:", error);
        }
    }, [notifications, storage, storageKey]);
    return {
        addNotification: async (notification) => {
            addNotification(notification);
        },
        markAsRead: async (id) => {
            await markAsRead(id);
        },
        markAllAsRead: async () => {
            await markAllAsRead();
        },
        deleteNotification: async (id) => {
            await deleteNotification(id);
        },
        clearAllNotifications: () => {
            clearAllNotifications();
        },
        clearStorage: () => {
            storage.removeItem(storageKey);
        },
    };
};
exports.useNotificationStorage = useNotificationStorage;
//# sourceMappingURL=useNotificationStorage.js.map