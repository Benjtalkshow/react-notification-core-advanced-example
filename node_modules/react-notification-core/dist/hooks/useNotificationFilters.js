"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNotificationFilters = void 0;
const react_1 = require("react");
const NotificationContext_1 = require("../context/NotificationContext");
const fetchUtils_1 = require("../utils/fetchUtils");
/**
 * Hook for filtering notifications
 */
const useNotificationFilters = () => {
    const { notifications } = (0, NotificationContext_1.useNotifications)();
    const [filters, setFilters] = (0, react_1.useState)({});
    // Apply filters to notifications
    const filteredNotifications = (0, react_1.useMemo)(() => {
        return (0, fetchUtils_1.filterNotifications)(notifications, filters);
    }, [notifications, filters]);
    // Filter by read status
    const filterByReadStatus = (0, react_1.useCallback)((read) => {
        setFilters((prev) => ({ ...prev, read }));
    }, []);
    // Filter by type
    const filterByType = (0, react_1.useCallback)((type) => {
        setFilters((prev) => ({ ...prev, type }));
    }, []);
    // Filter by search term
    const filterBySearch = (0, react_1.useCallback)((search) => {
        setFilters((prev) => ({ ...prev, search }));
    }, []);
    // Filter by date range
    const filterByDateRange = (0, react_1.useCallback)((fromDate, toDate) => {
        setFilters((prev) => ({ ...prev, fromDate, toDate }));
    }, []);
    // Reset all filters
    const resetFilters = (0, react_1.useCallback)(() => {
        setFilters({});
    }, []);
    // Get notification counts by type
    const countsByType = (0, react_1.useMemo)(() => {
        return notifications.reduce((counts, notification) => {
            const type = notification.type || "default";
            counts[type] = (counts[type] || 0) + 1;
            return counts;
        }, {});
    }, [notifications]);
    return {
        filters,
        filteredNotifications,
        filterByReadStatus,
        filterByType,
        filterBySearch,
        filterByDateRange,
        resetFilters,
        countsByType,
        totalCount: notifications.length,
        filteredCount: filteredNotifications.length,
        unreadCount: notifications.filter((n) => !n.read).length,
    };
};
exports.useNotificationFilters = useNotificationFilters;
//# sourceMappingURL=useNotificationFilters.js.map